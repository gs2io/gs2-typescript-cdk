import { Stack } from '../../core/model';
import { Script as Gs2Script, Namespace } from '../../script/model';
import StateMachine from "./StateMachine";
import IVariable from "./IVariable";
import Task from "./Task";
import InParam from "./InParam";
import OutParam from "./OutParam";
import WaitTask from "./WaitTask";
import PassTask from "./PassTask";
import ErrorTask from "./ErrorTask";
import SubStateMachineTask from "./SubStateMachineTask";
import IntType from "./IntType";
import FloatType from "./FloatType";
import BoolType from "./BoolType";
import StringType from "./StringType";
import ArrayType from "./ArrayType";
import MapType from "./MapType";
export default class StateMachineDefinition {
    stateMachineName: string;
    stateMachines: StateMachine[];
    add(stateMachine: StateMachine): void;
    entryPointStateMachineName(stateMachineName: string): void;
    stateMachine(name: string, variables: IVariable[]): StateMachine;
    scriptTask(name: string, args: IVariable[], script: string): Task;
    subStateMachineTask(name: string, subStateMachineName: string, inParams: InParam[], outParams: OutParam[], nextTaskName: string): SubStateMachineTask;
    inParam(currentStateMachineVariable: IVariable, subStateMachineVariable: IVariable): InParam;
    outParam(subStateMachineVariable: IVariable, currentStateMachineVariable: IVariable): OutParam;
    waitTask(name: string): WaitTask;
    passTask(name: string): PassTask;
    errorTask(name: string): ErrorTask;
    intType(name: string): IntType;
    floatType(name: string): FloatType;
    boolType(name: string): BoolType;
    stringType(name: string): StringType;
    arrayType(name: string): ArrayType;
    mapType(name: string): MapType;
    appendScripts(stack: Stack, scriptNamespace: Namespace): Gs2Script[];
    gsl(): string;
    mermaid(): string;
}
